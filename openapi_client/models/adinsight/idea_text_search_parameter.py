# coding: utf-8

"""
    AdInsightService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union, Set
from openapi_client.models.adinsight.keyword import Keyword
from typing_extensions import Self

class IdeaTextSearchParameter(BaseModel):
    """
    IdeaTextSearchParameter
    """ # noqa: E501
    included: Optional[List[Optional[Keyword]]] = Field(default=None, alias="Included")
    excluded: Optional[List[Optional[Keyword]]] = Field(default=None, alias="Excluded")
    type: Optional[StrictStr] = Field(default='IdeaTextSearchParameter', alias="Type")
    __properties: ClassVar[List[str]] = ["Included", "Excluded", "Type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )
	
    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())
	
    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IdeaTextSearchParameter from a JSON string"""
        return cls.from_dict(json.loads(json_str))
	

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in included (list)
        _items = []
        if self.included:
            for _item_included in self.included:
                if _item_included:
                    _items.append(_item_included.to_dict())
            _dict['Included'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in excluded (list)
        _items = []
        if self.excluded:
            for _item_excluded in self.excluded:
                if _item_excluded:
                    _items.append(_item_excluded.to_dict())
            _dict['Excluded'] = _items
        # set to None if included (nullable) is None
        # and model_fields_set contains the field
        if self.included is None and "included" in self.model_fields_set:
            _dict['Included'] = None

        # set to None if excluded (nullable) is None
        # and model_fields_set contains the field
        if self.excluded is None and "excluded" in self.model_fields_set:
            _dict['Excluded'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['Type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IdeaTextSearchParameter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Included": [Keyword.from_dict(_item) for _item in obj["Included"]] if obj.get("Included") is not None else None,
                        "Excluded": [Keyword.from_dict(_item) for _item in obj["Excluded"]] if obj.get("Excluded") is not None else None,
                        "Type": obj.get("Type") if obj.get("Type") is not None else 'IdeaTextSearchParameter'
        })
        return _obj
