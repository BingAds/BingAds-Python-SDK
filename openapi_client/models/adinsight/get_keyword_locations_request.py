# coding: utf-8

"""
    AdInsightService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union, Set
from typing_extensions import Self

class GetKeywordLocationsRequest(BaseModel):
    """
    GetKeywordLocationsRequest
    """ # noqa: E501
    keywords: Optional[List[StrictStr]] = Field(default=None, alias="Keywords")
    language: Optional[StrictStr] = Field(default=None, alias="Language")
    publisher_country: Optional[StrictStr] = Field(default=None, alias="PublisherCountry")
    device: Optional[List[StrictStr]] = Field(default=None, alias="Device")
    level: Optional[StrictInt] = Field(default=None, alias="Level")
    parent_country: Optional[StrictStr] = Field(default=None, alias="ParentCountry")
    max_locations: Optional[StrictInt] = Field(default=None, alias="MaxLocations")
    __properties: ClassVar[List[str]] = ["Keywords", "Language", "PublisherCountry", "Device", "Level", "ParentCountry", "MaxLocations"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )
	

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if keywords (nullable) is None
        # and model_fields_set contains the field
        if self.keywords is None and "keywords" in self.model_fields_set:
            _dict['Keywords'] = None

        # set to None if language (nullable) is None
        # and model_fields_set contains the field
        if self.language is None and "language" in self.model_fields_set:
            _dict['Language'] = None

        # set to None if publisher_country (nullable) is None
        # and model_fields_set contains the field
        if self.publisher_country is None and "publisher_country" in self.model_fields_set:
            _dict['PublisherCountry'] = None

        # set to None if device (nullable) is None
        # and model_fields_set contains the field
        if self.device is None and "device" in self.model_fields_set:
            _dict['Device'] = None

        # set to None if level (nullable) is None
        # and model_fields_set contains the field
        if self.level is None and "level" in self.model_fields_set:
            _dict['Level'] = None

        # set to None if parent_country (nullable) is None
        # and model_fields_set contains the field
        if self.parent_country is None and "parent_country" in self.model_fields_set:
            _dict['ParentCountry'] = None

        # set to None if max_locations (nullable) is None
        # and model_fields_set contains the field
        if self.max_locations is None and "max_locations" in self.model_fields_set:
            _dict['MaxLocations'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetKeywordLocationsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Keywords": obj.get("Keywords"),
                        "Language": obj.get("Language") if obj.get("Language") is not None else None,
                        "PublisherCountry": obj.get("PublisherCountry") if obj.get("PublisherCountry") is not None else None,
                        "Device": obj.get("Device"),
                        "Level": obj.get("Level") if obj.get("Level") is not None else None,
                        "ParentCountry": obj.get("ParentCountry") if obj.get("ParentCountry") is not None else None,
                        "MaxLocations": obj.get("MaxLocations") if obj.get("MaxLocations") is not None else None
        })
        return _obj
