# coding: utf-8

"""
    AdInsightService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union, Set
from openapi_client.models.adinsight.day_month_and_year import DayMonthAndYear
from typing_extensions import Self

class HistoricalSearchCountPeriodic(BaseModel):
    """
    HistoricalSearchCountPeriodic
    """ # noqa: E501
    search_count: Optional[StrictStr] = Field(default=None, alias="SearchCount")
    day_month_and_year: Optional[DayMonthAndYear] = Field(default=None, alias="DayMonthAndYear")
    __properties: ClassVar[List[str]] = ["SearchCount", "DayMonthAndYear"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )
	

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of day_month_and_year
        if self.day_month_and_year:
            _dict['DayMonthAndYear'] = self.day_month_and_year.to_dict()
        # set to None if search_count (nullable) is None
        # and model_fields_set contains the field
        if self.search_count is None and "search_count" in self.model_fields_set:
            _dict['SearchCount'] = None

        # set to None if day_month_and_year (nullable) is None
        # and model_fields_set contains the field
        if self.day_month_and_year is None and "day_month_and_year" in self.model_fields_set:
            _dict['DayMonthAndYear'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HistoricalSearchCountPeriodic from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "SearchCount": obj.get("SearchCount") if obj.get("SearchCount") is not None else None,
                        "DayMonthAndYear": DayMonthAndYear.from_dict(obj["DayMonthAndYear"]) if obj.get("DayMonthAndYear") is not None else None
        })
        return _obj
