# coding: utf-8

"""
    AdInsightService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union, Set
from openapi_client.models.adinsight.ad_position import AdPosition
from openapi_client.models.adinsight.match_type import MatchType
from typing_extensions import Self

class KeywordKPI(BaseModel):
    """
    KeywordKPI
    """ # noqa: E501
    device: Optional[StrictStr] = Field(default=None, alias="Device")
    match_type: Optional[MatchType] = Field(default=None, alias="MatchType")
    ad_position: Optional[AdPosition] = Field(default=None, alias="AdPosition")
    clicks: Optional[StrictInt] = Field(default=None, alias="Clicks")
    impressions: Optional[StrictStr] = Field(default=None, alias="Impressions")
    average_cpc: Optional[StrictFloat] = Field(default=None, alias="AverageCPC")
    ctr: Optional[StrictFloat] = Field(default=None, alias="CTR")
    total_cost: Optional[StrictFloat] = Field(default=None, alias="TotalCost")
    average_bid: Optional[StrictFloat] = Field(default=None, alias="AverageBid")
    __properties: ClassVar[List[str]] = ["Device", "MatchType", "AdPosition", "Clicks", "Impressions", "AverageCPC", "CTR", "TotalCost", "AverageBid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )
	

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if device (nullable) is None
        # and model_fields_set contains the field
        if self.device is None and "device" in self.model_fields_set:
            _dict['Device'] = None

        # set to None if match_type (nullable) is None
        # and model_fields_set contains the field
        if self.match_type is None and "match_type" in self.model_fields_set:
            _dict['MatchType'] = None

        # set to None if ad_position (nullable) is None
        # and model_fields_set contains the field
        if self.ad_position is None and "ad_position" in self.model_fields_set:
            _dict['AdPosition'] = None

        # set to None if clicks (nullable) is None
        # and model_fields_set contains the field
        if self.clicks is None and "clicks" in self.model_fields_set:
            _dict['Clicks'] = None

        # set to None if impressions (nullable) is None
        # and model_fields_set contains the field
        if self.impressions is None and "impressions" in self.model_fields_set:
            _dict['Impressions'] = None

        # set to None if average_cpc (nullable) is None
        # and model_fields_set contains the field
        if self.average_cpc is None and "average_cpc" in self.model_fields_set:
            _dict['AverageCPC'] = None

        # set to None if ctr (nullable) is None
        # and model_fields_set contains the field
        if self.ctr is None and "ctr" in self.model_fields_set:
            _dict['CTR'] = None

        # set to None if total_cost (nullable) is None
        # and model_fields_set contains the field
        if self.total_cost is None and "total_cost" in self.model_fields_set:
            _dict['TotalCost'] = None

        # set to None if average_bid (nullable) is None
        # and model_fields_set contains the field
        if self.average_bid is None and "average_bid" in self.model_fields_set:
            _dict['AverageBid'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KeywordKPI from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Device": obj.get("Device") if obj.get("Device") is not None else None,
                        "MatchType": obj.get("MatchType") if obj.get("MatchType") is not None else None,
                        "AdPosition": obj.get("AdPosition") if obj.get("AdPosition") is not None else None,
                        "Clicks": obj.get("Clicks") if obj.get("Clicks") is not None else None,
                        "Impressions": obj.get("Impressions") if obj.get("Impressions") is not None else None,
                        "AverageCPC": obj.get("AverageCPC") if obj.get("AverageCPC") is not None else None,
                        "CTR": obj.get("CTR") if obj.get("CTR") is not None else None,
                        "TotalCost": obj.get("TotalCost") if obj.get("TotalCost") is not None else None,
                        "AverageBid": obj.get("AverageBid") if obj.get("AverageBid") is not None else None
        })
        return _obj
