# coding: utf-8

"""
    ReportingService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
from enum import Enum
from typing_extensions import Self

class GeographicPerformanceReportColumn(str, Enum):
    ACCOUNTNAME = 'AccountName'

    ACCOUNTNUMBER = 'AccountNumber'

    ACCOUNTID = 'AccountId'

    TIMEPERIOD = 'TimePeriod'

    CAMPAIGNNAME = 'CampaignName'

    CAMPAIGNID = 'CampaignId'

    ADGROUPNAME = 'AdGroupName'

    ADGROUPID = 'AdGroupId'

    COUNTRY = 'Country'

    STATE = 'State'

    METROAREA = 'MetroArea'

    CITY = 'City'

    CURRENCYCODE = 'CurrencyCode'

    ADDISTRIBUTION = 'AdDistribution'

    IMPRESSIONS = 'Impressions'

    CLICKS = 'Clicks'

    CTR = 'Ctr'

    AVERAGECPC = 'AverageCpc'

    SPEND = 'Spend'

    AVERAGEPOSITION = 'AveragePosition'

    PROXIMITYTARGETLOCATION = 'ProximityTargetLocation'

    RADIUS = 'Radius'

    LANGUAGE = 'Language'

    BIDMATCHTYPE = 'BidMatchType'

    DELIVEREDMATCHTYPE = 'DeliveredMatchType'

    NETWORK = 'Network'

    TOPVSOTHER = 'TopVsOther'

    DEVICETYPE = 'DeviceType'

    DEVICEOS = 'DeviceOS'

    ASSISTS = 'Assists'

    CONVERSIONS = 'Conversions'

    CONVERSIONRATE = 'ConversionRate'

    REVENUE = 'Revenue'

    RETURNONADSPEND = 'ReturnOnAdSpend'

    COSTPERCONVERSION = 'CostPerConversion'

    COSTPERASSIST = 'CostPerAssist'

    REVENUEPERCONVERSION = 'RevenuePerConversion'

    REVENUEPERASSIST = 'RevenuePerAssist'

    LOCATIONTYPE = 'LocationType'

    MOSTSPECIFICLOCATION = 'MostSpecificLocation'

    ACCOUNTSTATUS = 'AccountStatus'

    CAMPAIGNSTATUS = 'CampaignStatus'

    ADGROUPSTATUS = 'AdGroupStatus'

    COUNTY = 'County'

    POSTALCODE = 'PostalCode'

    LOCATIONID = 'LocationId'

    BASECAMPAIGNID = 'BaseCampaignId'

    ALLCONVERSIONS = 'AllConversions'

    ALLREVENUE = 'AllRevenue'

    ALLCONVERSIONRATE = 'AllConversionRate'

    ALLCOSTPERCONVERSION = 'AllCostPerConversion'

    ALLRETURNONADSPEND = 'AllReturnOnAdSpend'

    ALLREVENUEPERCONVERSION = 'AllRevenuePerConversion'

    VIEWTHROUGHCONVERSIONS = 'ViewThroughConversions'

    GOAL = 'Goal'

    GOALTYPE = 'GoalType'

    ABSOLUTETOPIMPRESSIONRATEPERCENT = 'AbsoluteTopImpressionRatePercent'

    TOPIMPRESSIONRATEPERCENT = 'TopImpressionRatePercent'

    AVERAGECPM = 'AverageCpm'

    CONVERSIONSQUALIFIED = 'ConversionsQualified'

    ALLCONVERSIONSQUALIFIED = 'AllConversionsQualified'

    VIEWTHROUGHCONVERSIONSQUALIFIED = 'ViewThroughConversionsQualified'

    NEIGHBORHOOD = 'Neighborhood'

    VIEWTHROUGHREVENUE = 'ViewThroughRevenue'

    CAMPAIGNTYPE = 'CampaignType'

    ASSETGROUPID = 'AssetGroupId'

    ASSETGROUPNAME = 'AssetGroupName'

    ASSETGROUPSTATUS = 'AssetGroupStatus'

	
    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GeographicPerformanceReportColumn from a JSON string"""
        return cls(json.loads(json_str))


