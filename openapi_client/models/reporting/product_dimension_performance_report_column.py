# coding: utf-8

"""
    ReportingService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
from enum import Enum
from typing_extensions import Self

class ProductDimensionPerformanceReportColumn(str, Enum):
    TIMEPERIOD = 'TimePeriod'

    ACCOUNTNAME = 'AccountName'

    ACCOUNTNUMBER = 'AccountNumber'

    ADGROUPNAME = 'AdGroupName'

    ADGROUPID = 'AdGroupId'

    CAMPAIGNSTATUS = 'CampaignStatus'

    ACCOUNTSTATUS = 'AccountStatus'

    ADGROUPSTATUS = 'AdGroupStatus'

    NETWORK = 'Network'

    ADID = 'AdId'

    CAMPAIGNID = 'CampaignId'

    CAMPAIGNNAME = 'CampaignName'

    CURRENCYCODE = 'CurrencyCode'

    DEVICETYPE = 'DeviceType'

    LANGUAGE = 'Language'

    MERCHANTPRODUCTID = 'MerchantProductId'

    TITLE = 'Title'

    CONDITION = 'Condition'

    BRAND = 'Brand'

    PRICE = 'Price'

    CUSTOMLABEL0 = 'CustomLabel0'

    CUSTOMLABEL1 = 'CustomLabel1'

    CUSTOMLABEL2 = 'CustomLabel2'

    CUSTOMLABEL3 = 'CustomLabel3'

    CUSTOMLABEL4 = 'CustomLabel4'

    PRODUCTTYPE1 = 'ProductType1'

    PRODUCTTYPE2 = 'ProductType2'

    PRODUCTTYPE3 = 'ProductType3'

    PRODUCTTYPE4 = 'ProductType4'

    PRODUCTTYPE5 = 'ProductType5'

    PRODUCTCATEGORY1 = 'ProductCategory1'

    PRODUCTCATEGORY2 = 'ProductCategory2'

    PRODUCTCATEGORY3 = 'ProductCategory3'

    PRODUCTCATEGORY4 = 'ProductCategory4'

    PRODUCTCATEGORY5 = 'ProductCategory5'

    IMPRESSIONS = 'Impressions'

    CLICKS = 'Clicks'

    CTR = 'Ctr'

    AVERAGECPC = 'AverageCpc'

    SPEND = 'Spend'

    CONVERSIONS = 'Conversions'

    CONVERSIONRATE = 'ConversionRate'

    REVENUE = 'Revenue'

    REVENUEPERCONVERSION = 'RevenuePerConversion'

    SELLERNAME = 'SellerName'

    OFFERLANGUAGE = 'OfferLanguage'

    COUNTRYOFSALE = 'CountryOfSale'

    ADSTATUS = 'AdStatus'

    IMPRESSIONSHAREPERCENT = 'ImpressionSharePercent'

    IMPRESSIONLOSTTOBUDGETPERCENT = 'ImpressionLostToBudgetPercent'

    IMPRESSIONLOSTTORANKPERCENT = 'ImpressionLostToRankPercent'

    BENCHMARKBID = 'BenchmarkBid'

    BENCHMARKCTR = 'BenchmarkCtr'

    TOPVSOTHER = 'TopVsOther'

    ADDISTRIBUTION = 'AdDistribution'

    CLICKTYPEID = 'ClickTypeId'

    TOTALCLICKSONADELEMENTS = 'TotalClicksOnAdElements'

    CLICKTYPE = 'ClickType'

    RETURNONADSPEND = 'ReturnOnAdSpend'

    BIDSTRATEGYTYPE = 'BidStrategyType'

    LOCALSTORECODE = 'LocalStoreCode'

    STOREID = 'StoreId'

    ASSISTEDIMPRESSIONS = 'AssistedImpressions'

    ASSISTEDCLICKS = 'AssistedClicks'

    CLICKSHAREPERCENT = 'ClickSharePercent'

    ABSOLUTETOPIMPRESSIONSHAREPERCENT = 'AbsoluteTopImpressionSharePercent'

    ASSISTEDCONVERSIONS = 'AssistedConversions'

    ALLCONVERSIONS = 'AllConversions'

    ALLREVENUE = 'AllRevenue'

    ALLCONVERSIONRATE = 'AllConversionRate'

    ALLCOSTPERCONVERSION = 'AllCostPerConversion'

    ALLRETURNONADSPEND = 'AllReturnOnAdSpend'

    ALLREVENUEPERCONVERSION = 'AllRevenuePerConversion'

    COSTPERCONVERSION = 'CostPerConversion'

    VIEWTHROUGHCONVERSIONS = 'ViewThroughConversions'

    GOAL = 'Goal'

    GOALTYPE = 'GoalType'

    PRODUCTBOUGHT = 'ProductBought'

    QUANTITYBOUGHT = 'QuantityBought'

    ABSOLUTETOPIMPRESSIONRATEPERCENT = 'AbsoluteTopImpressionRatePercent'

    AVERAGECPM = 'AverageCpm'

    CONVERSIONSQUALIFIED = 'ConversionsQualified'

    ASSISTEDCONVERSIONSQUALIFIED = 'AssistedConversionsQualified'

    ALLCONVERSIONSQUALIFIED = 'AllConversionsQualified'

    VIEWTHROUGHCONVERSIONSQUALIFIED = 'ViewThroughConversionsQualified'

    PRODUCTBOUGHTTITLE = 'ProductBoughtTitle'

    GTIN = 'GTIN'

    MPN = 'MPN'

    VIEWTHROUGHREVENUE = 'ViewThroughRevenue'

    GOALID = 'GoalId'

    SALES = 'Sales'

    COSTPERSALE = 'CostPerSale'

    REVENUEPERSALE = 'RevenuePerSale'

    INSTALLS = 'Installs'

    COSTPERINSTALL = 'CostPerInstall'

    REVENUEPERINSTALL = 'RevenuePerInstall'

    CAMPAIGNTYPE = 'CampaignType'

    ASSETGROUPID = 'AssetGroupId'

    ASSETGROUPNAME = 'AssetGroupName'

    ASSETGROUPSTATUS = 'AssetGroupStatus'

    COLLECTIONID = 'CollectionId'

    FEEDLABEL = 'FeedLabel'

	
    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ProductDimensionPerformanceReportColumn from a JSON string"""
        return cls(json.loads(json_str))


