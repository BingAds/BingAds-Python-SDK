# coding: utf-8

"""
    ReportingService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
from enum import Enum
from typing_extensions import Self

class AccountPerformanceReportColumn(str, Enum):
    ACCOUNTNAME = 'AccountName'

    ACCOUNTNUMBER = 'AccountNumber'

    ACCOUNTID = 'AccountId'

    TIMEPERIOD = 'TimePeriod'

    CURRENCYCODE = 'CurrencyCode'

    ADDISTRIBUTION = 'AdDistribution'

    IMPRESSIONS = 'Impressions'

    CLICKS = 'Clicks'

    CTR = 'Ctr'

    AVERAGECPC = 'AverageCpc'

    SPEND = 'Spend'

    AVERAGEPOSITION = 'AveragePosition'

    CONVERSIONS = 'Conversions'

    CONVERSIONRATE = 'ConversionRate'

    COSTPERCONVERSION = 'CostPerConversion'

    LOWQUALITYCLICKS = 'LowQualityClicks'

    LOWQUALITYCLICKSPERCENT = 'LowQualityClicksPercent'

    LOWQUALITYIMPRESSIONS = 'LowQualityImpressions'

    LOWQUALITYIMPRESSIONSPERCENT = 'LowQualityImpressionsPercent'

    LOWQUALITYCONVERSIONS = 'LowQualityConversions'

    LOWQUALITYCONVERSIONRATE = 'LowQualityConversionRate'

    DEVICETYPE = 'DeviceType'

    DEVICEOS = 'DeviceOS'

    IMPRESSIONSHAREPERCENT = 'ImpressionSharePercent'

    IMPRESSIONLOSTTOBUDGETPERCENT = 'ImpressionLostToBudgetPercent'

    IMPRESSIONLOSTTORANKAGGPERCENT = 'ImpressionLostToRankAggPercent'

    PHONEIMPRESSIONS = 'PhoneImpressions'

    PHONECALLS = 'PhoneCalls'

    PTR = 'Ptr'

    NETWORK = 'Network'

    TOPVSOTHER = 'TopVsOther'

    BIDMATCHTYPE = 'BidMatchType'

    DELIVEREDMATCHTYPE = 'DeliveredMatchType'

    ASSISTS = 'Assists'

    REVENUE = 'Revenue'

    RETURNONADSPEND = 'ReturnOnAdSpend'

    COSTPERASSIST = 'CostPerAssist'

    REVENUEPERCONVERSION = 'RevenuePerConversion'

    REVENUEPERASSIST = 'RevenuePerAssist'

    ACCOUNTSTATUS = 'AccountStatus'

    LOWQUALITYGENERALCLICKS = 'LowQualityGeneralClicks'

    LOWQUALITYSOPHISTICATEDCLICKS = 'LowQualitySophisticatedClicks'

    EXACTMATCHIMPRESSIONSHAREPERCENT = 'ExactMatchImpressionSharePercent'

    CUSTOMERID = 'CustomerId'

    CUSTOMERNAME = 'CustomerName'

    CLICKSHAREPERCENT = 'ClickSharePercent'

    ABSOLUTETOPIMPRESSIONSHAREPERCENT = 'AbsoluteTopImpressionSharePercent'

    TOPIMPRESSIONSHARELOSTTORANKPERCENT = 'TopImpressionShareLostToRankPercent'

    TOPIMPRESSIONSHARELOSTTOBUDGETPERCENT = 'TopImpressionShareLostToBudgetPercent'

    ABSOLUTETOPIMPRESSIONSHARELOSTTORANKPERCENT = 'AbsoluteTopImpressionShareLostToRankPercent'

    ABSOLUTETOPIMPRESSIONSHARELOSTTOBUDGETPERCENT = 'AbsoluteTopImpressionShareLostToBudgetPercent'

    TOPIMPRESSIONSHAREPERCENT = 'TopImpressionSharePercent'

    ABSOLUTETOPIMPRESSIONRATEPERCENT = 'AbsoluteTopImpressionRatePercent'

    TOPIMPRESSIONRATEPERCENT = 'TopImpressionRatePercent'

    ALLCONVERSIONS = 'AllConversions'

    ALLREVENUE = 'AllRevenue'

    ALLCONVERSIONRATE = 'AllConversionRate'

    ALLCOSTPERCONVERSION = 'AllCostPerConversion'

    ALLRETURNONADSPEND = 'AllReturnOnAdSpend'

    ALLREVENUEPERCONVERSION = 'AllRevenuePerConversion'

    VIEWTHROUGHCONVERSIONS = 'ViewThroughConversions'

    GOAL = 'Goal'

    GOALTYPE = 'GoalType'

    AUDIENCEIMPRESSIONSHAREPERCENT = 'AudienceImpressionSharePercent'

    AUDIENCEIMPRESSIONLOSTTORANKPERCENT = 'AudienceImpressionLostToRankPercent'

    AUDIENCEIMPRESSIONLOSTTOBUDGETPERCENT = 'AudienceImpressionLostToBudgetPercent'

    AVERAGECPM = 'AverageCpm'

    CONVERSIONSQUALIFIED = 'ConversionsQualified'

    LOWQUALITYCONVERSIONSQUALIFIED = 'LowQualityConversionsQualified'

    ALLCONVERSIONSQUALIFIED = 'AllConversionsQualified'

    VIEWTHROUGHCONVERSIONSQUALIFIED = 'ViewThroughConversionsQualified'

    VIEWTHROUGHREVENUE = 'ViewThroughRevenue'

    VIDEOVIEWS = 'VideoViews'

    VIEWTHROUGHRATE = 'ViewThroughRate'

    AVERAGECPV = 'AverageCPV'

    VIDEOVIEWSAT25PERCENT = 'VideoViewsAt25Percent'

    VIDEOVIEWSAT50PERCENT = 'VideoViewsAt50Percent'

    VIDEOVIEWSAT75PERCENT = 'VideoViewsAt75Percent'

    COMPLETEDVIDEOVIEWS = 'CompletedVideoViews'

    VIDEOCOMPLETIONRATE = 'VideoCompletionRate'

    TOTALWATCHTIMEINMS = 'TotalWatchTimeInMS'

    AVERAGEWATCHTIMEPERVIDEOVIEW = 'AverageWatchTimePerVideoView'

    AVERAGEWATCHTIMEPERIMPRESSION = 'AverageWatchTimePerImpression'

    SALES = 'Sales'

    COSTPERSALE = 'CostPerSale'

    REVENUEPERSALE = 'RevenuePerSale'

    INSTALLS = 'Installs'

    COSTPERINSTALL = 'CostPerInstall'

    REVENUEPERINSTALL = 'RevenuePerInstall'

    DOWNLOADS = 'Downloads'

    POSTCLICKDOWNLOADRATE = 'PostClickDownloadRate'

    COSTPERDOWNLOAD = 'CostPerDownload'

    APPINSTALLS = 'AppInstalls'

    POSTCLICKINSTALLRATE = 'PostClickInstallRate'

    CPI = 'CPI'

    PURCHASES = 'Purchases'

    POSTINSTALLPURCHASERATE = 'PostInstallPurchaseRate'

    CPP = 'CPP'

    SUBSCRIPTIONS = 'Subscriptions'

    POSTINSTALLSUBSCRIPTIONRATE = 'PostInstallSubscriptionRate'

    CPS = 'CPS'

    NEWCUSTOMERCONVERSIONS = 'NewCustomerConversions'

    NEWCUSTOMERREVENUE = 'NewCustomerRevenue'

    NEWCUSTOMERCONVERSIONRATE = 'NewCustomerConversionRate'

    NEWCUSTOMERCPA = 'NewCustomerCPA'

    NEWCUSTOMERRETURNONADSPEND = 'NewCustomerReturnOnAdSpend'

    CONVERSIONDELAY = 'ConversionDelay'

    UNKNOWNCUSTOMERCONVERSIONS = 'UnknownCustomerConversions'

    UNKNOWNCUSTOMERREVENUE = 'UnknownCustomerRevenue'

    NEWCUSTOMERCOUNT = 'NewCustomerCount'

	
    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AccountPerformanceReportColumn from a JSON string"""
        return cls(json.loads(json_str))


