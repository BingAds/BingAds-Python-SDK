# coding: utf-8

"""
    ReportingService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.reporting.ad_api_error import AdApiError
from openapi_client.models.reporting.ad_api_fault_detail import AdApiFaultDetail
from openapi_client.models.reporting.api_fault_detail import ApiFaultDetail
from openapi_client.models.reporting.batch_error import BatchError
from openapi_client.models.reporting.operation_error import OperationError
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

ApplicationFault_ONE_OF_SCHEMAS = ["AdApiFaultDetail", "ApiFaultDetail"]

class ApplicationFault(BaseModel):
    """
    ApplicationFault
    """
    # data type: AdApiFaultDetail
    oneof_schema_ad_api_fault_detail_validator: Optional[AdApiFaultDetail] = None
    # data type: ApiFaultDetail
    oneof_schema_api_fault_detail_validator: Optional[ApiFaultDetail] = None
    actual_instance: Optional[Union[AdApiFaultDetail, ApiFaultDetail]] = None
    one_of_schemas: Set[str] = { "AdApiFaultDetail", "ApiFaultDetail" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )

    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        if v is None:
            return v

        instance = ApplicationFault.model_construct()
        error_messages = []
        match = 0
        # validate data type: AdApiFaultDetail
        if not isinstance(v, AdApiFaultDetail):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AdApiFaultDetail`")
        else:
            match += 1
        # validate data type: ApiFaultDetail
        if not isinstance(v, ApiFaultDetail):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ApiFaultDetail`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in ApplicationFault with oneOf schemas: AdApiFaultDetail, ApiFaultDetail. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in ApplicationFault with oneOf schemas: AdApiFaultDetail, ApiFaultDetail. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: Optional[str]) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        if json_str is None:
            return instance

        error_messages = []
        match = 0

        # use oneOf discriminator to lookup the data type
        _data_type = json.loads(json_str).get("Type")
        if not _data_type:
            raise ValueError("Failed to lookup data type from the field `Type` in the input.")

		# check if data type is `AdApiFaultDetail`
        if _data_type == "AdApiFaultDetail":
            instance.actual_instance = AdApiFaultDetail.from_json(json_str)
            return instance
			
		# check if data type is `ApiFaultDetail`
        if _data_type == "ApiFaultDetail":
            instance.actual_instance = ApiFaultDetail.from_json(json_str)
            return instance
			

        # deserialize data into AdApiFaultDetail
        try:
            instance.actual_instance = AdApiFaultDetail.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ApiFaultDetail
        try:
            instance.actual_instance = ApiFaultDetail.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into ApplicationFault with oneOf schemas: AdApiFaultDetail, ApiFaultDetail. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into ApplicationFault with oneOf schemas: AdApiFaultDetail, ApiFaultDetail. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AdApiFaultDetail, ApiFaultDetail]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())

    def __getattr__(self, name):
        """Forward attribute access to actual_instance"""
        if self.actual_instance is not None and hasattr(self.actual_instance, name):
            return getattr(self.actual_instance, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, name, value):
        """Forward attribute setting to actual_instance"""
        if name in ['actual_instance', 'oneof_schema_ad_api_fault_detail_validator', 'oneof_schema_api_fault_detail_validator', 'one_of_schemas', 'model_config', 'discriminator_value_class_map']:
            super().__setattr__(name, value)
        elif self.actual_instance is not None and hasattr(self.actual_instance, name):
            setattr(self.actual_instance, name, value)
        else:
            super().__setattr__(name, value)
