# coding: utf-8

"""
    ReportingService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union, Set
from openapi_client.models.reporting.account_status_report_filter import AccountStatusReportFilter
from openapi_client.models.reporting.ad_distribution_report_filter import AdDistributionReportFilter
from openapi_client.models.reporting.ad_group_status_report_filter import AdGroupStatusReportFilter
from openapi_client.models.reporting.campaign_status_report_filter import CampaignStatusReportFilter
from openapi_client.models.reporting.device_os_report_filter import DeviceOSReportFilter
from openapi_client.models.reporting.device_type_report_filter import DeviceTypeReportFilter
from openapi_client.models.reporting.language_report_filter import LanguageReportFilter
from typing_extensions import Self

class AdGroupPerformanceReportFilter(BaseModel):
    """
    AdGroupPerformanceReportFilter
    """ # noqa: E501
    ad_distribution: Optional[AdDistributionReportFilter] = Field(default=None, alias="AdDistribution")
    status: Optional[AdGroupStatusReportFilter] = Field(default=None, alias="Status")
    device_type: Optional[DeviceTypeReportFilter] = Field(default=None, alias="DeviceType")
    device_os: Optional[DeviceOSReportFilter] = Field(default=None, alias="DeviceOS")
    language: Optional[LanguageReportFilter] = Field(default=None, alias="Language")
    account_status: Optional[AccountStatusReportFilter] = Field(default=None, alias="AccountStatus")
    campaign_status: Optional[CampaignStatusReportFilter] = Field(default=None, alias="CampaignStatus")
    __properties: ClassVar[List[str]] = ["AdDistribution", "Status", "DeviceType", "DeviceOS", "Language", "AccountStatus", "CampaignStatus"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )
	

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if ad_distribution (nullable) is None
        # and model_fields_set contains the field
        if self.ad_distribution is None and "ad_distribution" in self.model_fields_set:
            _dict['AdDistribution'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['Status'] = None

        # set to None if device_type (nullable) is None
        # and model_fields_set contains the field
        if self.device_type is None and "device_type" in self.model_fields_set:
            _dict['DeviceType'] = None

        # set to None if device_os (nullable) is None
        # and model_fields_set contains the field
        if self.device_os is None and "device_os" in self.model_fields_set:
            _dict['DeviceOS'] = None

        # set to None if language (nullable) is None
        # and model_fields_set contains the field
        if self.language is None and "language" in self.model_fields_set:
            _dict['Language'] = None

        # set to None if account_status (nullable) is None
        # and model_fields_set contains the field
        if self.account_status is None and "account_status" in self.model_fields_set:
            _dict['AccountStatus'] = None

        # set to None if campaign_status (nullable) is None
        # and model_fields_set contains the field
        if self.campaign_status is None and "campaign_status" in self.model_fields_set:
            _dict['CampaignStatus'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdGroupPerformanceReportFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AdDistribution": obj.get("AdDistribution") if obj.get("AdDistribution") is not None else None,
                        "Status": obj.get("Status") if obj.get("Status") is not None else None,
                        "DeviceType": obj.get("DeviceType") if obj.get("DeviceType") is not None else None,
                        "DeviceOS": obj.get("DeviceOS") if obj.get("DeviceOS") is not None else None,
                        "Language": obj.get("Language") if obj.get("Language") is not None else None,
                        "AccountStatus": obj.get("AccountStatus") if obj.get("AccountStatus") is not None else None,
                        "CampaignStatus": obj.get("CampaignStatus") if obj.get("CampaignStatus") is not None else None
        })
        return _obj
