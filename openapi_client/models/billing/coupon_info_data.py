# coding: utf-8

"""
    CustomerBillingService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union, Set
from typing_extensions import Self

class CouponInfoData(BaseModel):
    """
    CouponInfoData
    """ # noqa: E501
    account_id: Optional[StrictInt] = Field(default=None, alias="AccountId")
    coupon_id: Optional[StrictInt] = Field(default=None, alias="CouponId")
    claim_date: Optional[datetime] = Field(default=None, alias="ClaimDate")
    status: Optional[StrictInt] = Field(default=None, alias="Status")
    redemption_date: Optional[datetime] = Field(default=None, alias="RedemptionDate")
    expiration_date: Optional[datetime] = Field(default=None, alias="ExpirationDate")
    percent_off: Optional[StrictFloat] = Field(default=None, alias="PercentOff")
    coupon_value: Optional[StrictFloat] = Field(default=None, alias="CouponValue")
    upfront_spending: Optional[StrictFloat] = Field(default=None, alias="UpfrontSpending")
    active_duration: Optional[StrictInt] = Field(default=None, alias="ActiveDuration")
    spend_to_threshold: Optional[StrictFloat] = Field(default=None, alias="SpendToThreshold")
    start_date: Optional[datetime] = Field(default=None, alias="StartDate")
    end_date: Optional[datetime] = Field(default=None, alias="EndDate")
    balance: Optional[StrictFloat] = Field(default=None, alias="Balance")
    currency_code: Optional[StrictStr] = Field(default=None, alias="CurrencyCode")
    feature_id: Optional[StrictInt] = Field(default=None, alias="FeatureId")
    coupon_type: Optional[StrictInt] = Field(default=None, alias="CouponType")
    __properties: ClassVar[List[str]] = ["AccountId", "CouponId", "ClaimDate", "Status", "RedemptionDate", "ExpirationDate", "PercentOff", "CouponValue", "UpfrontSpending", "ActiveDuration", "SpendToThreshold", "StartDate", "EndDate", "Balance", "CurrencyCode", "FeatureId", "CouponType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )
	

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if account_id (nullable) is None
        # and model_fields_set contains the field
        if self.account_id is None and "account_id" in self.model_fields_set:
            _dict['AccountId'] = None

        # set to None if coupon_id (nullable) is None
        # and model_fields_set contains the field
        if self.coupon_id is None and "coupon_id" in self.model_fields_set:
            _dict['CouponId'] = None

        # set to None if claim_date (nullable) is None
        # and model_fields_set contains the field
        if self.claim_date is None and "claim_date" in self.model_fields_set:
            _dict['ClaimDate'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['Status'] = None

        # set to None if redemption_date (nullable) is None
        # and model_fields_set contains the field
        if self.redemption_date is None and "redemption_date" in self.model_fields_set:
            _dict['RedemptionDate'] = None

        # set to None if expiration_date (nullable) is None
        # and model_fields_set contains the field
        if self.expiration_date is None and "expiration_date" in self.model_fields_set:
            _dict['ExpirationDate'] = None

        # set to None if percent_off (nullable) is None
        # and model_fields_set contains the field
        if self.percent_off is None and "percent_off" in self.model_fields_set:
            _dict['PercentOff'] = None

        # set to None if coupon_value (nullable) is None
        # and model_fields_set contains the field
        if self.coupon_value is None and "coupon_value" in self.model_fields_set:
            _dict['CouponValue'] = None

        # set to None if upfront_spending (nullable) is None
        # and model_fields_set contains the field
        if self.upfront_spending is None and "upfront_spending" in self.model_fields_set:
            _dict['UpfrontSpending'] = None

        # set to None if active_duration (nullable) is None
        # and model_fields_set contains the field
        if self.active_duration is None and "active_duration" in self.model_fields_set:
            _dict['ActiveDuration'] = None

        # set to None if spend_to_threshold (nullable) is None
        # and model_fields_set contains the field
        if self.spend_to_threshold is None and "spend_to_threshold" in self.model_fields_set:
            _dict['SpendToThreshold'] = None

        # set to None if start_date (nullable) is None
        # and model_fields_set contains the field
        if self.start_date is None and "start_date" in self.model_fields_set:
            _dict['StartDate'] = None

        # set to None if end_date (nullable) is None
        # and model_fields_set contains the field
        if self.end_date is None and "end_date" in self.model_fields_set:
            _dict['EndDate'] = None

        # set to None if balance (nullable) is None
        # and model_fields_set contains the field
        if self.balance is None and "balance" in self.model_fields_set:
            _dict['Balance'] = None

        # set to None if currency_code (nullable) is None
        # and model_fields_set contains the field
        if self.currency_code is None and "currency_code" in self.model_fields_set:
            _dict['CurrencyCode'] = None

        # set to None if feature_id (nullable) is None
        # and model_fields_set contains the field
        if self.feature_id is None and "feature_id" in self.model_fields_set:
            _dict['FeatureId'] = None

        # set to None if coupon_type (nullable) is None
        # and model_fields_set contains the field
        if self.coupon_type is None and "coupon_type" in self.model_fields_set:
            _dict['CouponType'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CouponInfoData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AccountId": obj.get("AccountId") if obj.get("AccountId") is not None else None,
                        "CouponId": obj.get("CouponId") if obj.get("CouponId") is not None else None,
                        "ClaimDate": obj.get("ClaimDate") if obj.get("ClaimDate") is not None else None,
                        "Status": obj.get("Status") if obj.get("Status") is not None else None,
                        "RedemptionDate": obj.get("RedemptionDate") if obj.get("RedemptionDate") is not None else None,
                        "ExpirationDate": obj.get("ExpirationDate") if obj.get("ExpirationDate") is not None else None,
                        "PercentOff": obj.get("PercentOff") if obj.get("PercentOff") is not None else None,
                        "CouponValue": obj.get("CouponValue") if obj.get("CouponValue") is not None else None,
                        "UpfrontSpending": obj.get("UpfrontSpending") if obj.get("UpfrontSpending") is not None else None,
                        "ActiveDuration": obj.get("ActiveDuration") if obj.get("ActiveDuration") is not None else None,
                        "SpendToThreshold": obj.get("SpendToThreshold") if obj.get("SpendToThreshold") is not None else None,
                        "StartDate": obj.get("StartDate") if obj.get("StartDate") is not None else None,
                        "EndDate": obj.get("EndDate") if obj.get("EndDate") is not None else None,
                        "Balance": obj.get("Balance") if obj.get("Balance") is not None else None,
                        "CurrencyCode": obj.get("CurrencyCode") if obj.get("CurrencyCode") is not None else None,
                        "FeatureId": obj.get("FeatureId") if obj.get("FeatureId") is not None else None,
                        "CouponType": obj.get("CouponType") if obj.get("CouponType") is not None else None
        })
        return _obj
