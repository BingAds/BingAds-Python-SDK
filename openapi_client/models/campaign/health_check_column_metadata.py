# coding: utf-8

"""
    CampaignManagementService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union, Set
from openapi_client.models.campaign.health_check_action_link_metadata import HealthCheckActionLinkMetadata
from typing_extensions import Self

class HealthCheckColumnMetadata(BaseModel):
    """
    HealthCheckColumnMetadata
    """ # noqa: E501
    key: Optional[StrictStr] = Field(default=None, alias="Key")
    title: Optional[StrictStr] = Field(default=None, alias="Title")
    type: Optional[StrictStr] = Field(default=None, alias="Type")
    health_check_action_links_metadata: Optional[List[Optional[HealthCheckActionLinkMetadata]]] = Field(default=None, alias="HealthCheckActionLinksMetadata")
    __properties: ClassVar[List[str]] = ["Key", "Title", "Type", "HealthCheckActionLinksMetadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )
	

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in health_check_action_links_metadata (list)
        _items = []
        if self.health_check_action_links_metadata:
            for _item_health_check_action_links_metadata in self.health_check_action_links_metadata:
                if _item_health_check_action_links_metadata:
                    _items.append(_item_health_check_action_links_metadata.to_dict())
            _dict['HealthCheckActionLinksMetadata'] = _items
        # set to None if key (nullable) is None
        # and model_fields_set contains the field
        if self.key is None and "key" in self.model_fields_set:
            _dict['Key'] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['Title'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['Type'] = None

        # set to None if health_check_action_links_metadata (nullable) is None
        # and model_fields_set contains the field
        if self.health_check_action_links_metadata is None and "health_check_action_links_metadata" in self.model_fields_set:
            _dict['HealthCheckActionLinksMetadata'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HealthCheckColumnMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Key": obj.get("Key") if obj.get("Key") is not None else None,
                        "Title": obj.get("Title") if obj.get("Title") is not None else None,
                        "Type": obj.get("Type") if obj.get("Type") is not None else None,
                        "HealthCheckActionLinksMetadata": [HealthCheckActionLinkMetadata.from_dict(_item) for _item in obj["HealthCheckActionLinksMetadata"]] if obj.get("HealthCheckActionLinksMetadata") is not None else None
        })
        return _obj
