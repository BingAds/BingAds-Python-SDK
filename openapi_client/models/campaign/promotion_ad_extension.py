# coding: utf-8

"""
    CampaignManagementService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union, Set
from openapi_client.models.campaign.ad_extension_status import AdExtensionStatus
from openapi_client.models.campaign.app_url import AppUrl
from openapi_client.models.campaign.custom_parameters import CustomParameters
from openapi_client.models.campaign.key_value_pair_ofstring_andstring import KeyValuePairOfstringAndstring
from openapi_client.models.campaign.model_date import ModelDate
from openapi_client.models.campaign.promotion_discount_modifier import PromotionDiscountModifier
from openapi_client.models.campaign.promotion_occasion import PromotionOccasion
from openapi_client.models.campaign.schedule import Schedule
from typing_extensions import Self

class PromotionAdExtension(BaseModel):
    """
    PromotionAdExtension
    """ # noqa: E501
    promotion_item: Optional[StrictStr] = Field(default=None, alias="PromotionItem")
    discount_modifier: Optional[PromotionDiscountModifier] = Field(default=None, alias="DiscountModifier")
    percent_off: Optional[StrictFloat] = Field(default=None, alias="PercentOff")
    money_amount_off: Optional[StrictFloat] = Field(default=None, alias="MoneyAmountOff")
    promotion_code: Optional[StrictStr] = Field(default=None, alias="PromotionCode")
    orders_over_amount: Optional[StrictFloat] = Field(default=None, alias="OrdersOverAmount")
    promotion_start_date: Optional[ModelDate] = Field(default=None, alias="PromotionStartDate")
    promotion_end_date: Optional[ModelDate] = Field(default=None, alias="PromotionEndDate")
    promotion_occasion: Optional[PromotionOccasion] = Field(default=None, alias="PromotionOccasion")
    language: Optional[StrictStr] = Field(default=None, alias="Language")
    currency_code: Optional[StrictStr] = Field(default=None, alias="CurrencyCode")
    final_app_urls: Optional[List[Optional[AppUrl]]] = Field(default=None, alias="FinalAppUrls")
    final_mobile_urls: Optional[List[StrictStr]] = Field(default=None, alias="FinalMobileUrls")
    final_urls: Optional[List[StrictStr]] = Field(default=None, alias="FinalUrls")
    url_custom_parameters: Optional[CustomParameters] = Field(default=None, alias="UrlCustomParameters")
    tracking_url_template: Optional[StrictStr] = Field(default=None, alias="TrackingUrlTemplate")
    final_url_suffix: Optional[StrictStr] = Field(default=None, alias="FinalUrlSuffix")
    status: Optional[AdExtensionStatus] = Field(default=None, alias="Status")
    scheduling: Optional[Schedule] = Field(default=None, alias="Scheduling")
    device_preference: Optional[StrictStr] = Field(default=None, alias="DevicePreference")
    id: Optional[StrictStr] = Field(default=None, alias="Id")
    type: Optional[StrictStr] = Field(default='PromotionAdExtension', alias="Type")
    version: Optional[StrictInt] = Field(default=None, alias="Version")
    forward_compatibility_map: Optional[List[Optional[KeyValuePairOfstringAndstring]]] = Field(default=None, alias="ForwardCompatibilityMap")
    __properties: ClassVar[List[str]] = ["PromotionItem", "DiscountModifier", "PercentOff", "MoneyAmountOff", "PromotionCode", "OrdersOverAmount", "PromotionStartDate", "PromotionEndDate", "PromotionOccasion", "Language", "CurrencyCode", "FinalAppUrls", "FinalMobileUrls", "FinalUrls", "UrlCustomParameters", "TrackingUrlTemplate", "FinalUrlSuffix", "Status", "Scheduling", "DevicePreference", "Id", "Type", "Version", "ForwardCompatibilityMap"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )
	
    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())
	
    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PromotionAdExtension from a JSON string"""
        return cls.from_dict(json.loads(json_str))
	

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of promotion_start_date
        if self.promotion_start_date:
            _dict['PromotionStartDate'] = self.promotion_start_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of promotion_end_date
        if self.promotion_end_date:
            _dict['PromotionEndDate'] = self.promotion_end_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in final_app_urls (list)
        _items = []
        if self.final_app_urls:
            for _item_final_app_urls in self.final_app_urls:
                if _item_final_app_urls:
                    _items.append(_item_final_app_urls.to_dict())
            _dict['FinalAppUrls'] = _items
        # override the default output from pydantic by calling `to_dict()` of url_custom_parameters
        if self.url_custom_parameters:
            _dict['UrlCustomParameters'] = self.url_custom_parameters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scheduling
        if self.scheduling:
            _dict['Scheduling'] = self.scheduling.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in forward_compatibility_map (list)
        _items = []
        if self.forward_compatibility_map:
            for _item_forward_compatibility_map in self.forward_compatibility_map:
                if _item_forward_compatibility_map:
                    _items.append(_item_forward_compatibility_map.to_dict())
            _dict['ForwardCompatibilityMap'] = _items
        # set to None if promotion_item (nullable) is None
        # and model_fields_set contains the field
        if self.promotion_item is None and "promotion_item" in self.model_fields_set:
            _dict['PromotionItem'] = None

        # set to None if discount_modifier (nullable) is None
        # and model_fields_set contains the field
        if self.discount_modifier is None and "discount_modifier" in self.model_fields_set:
            _dict['DiscountModifier'] = None

        # set to None if percent_off (nullable) is None
        # and model_fields_set contains the field
        if self.percent_off is None and "percent_off" in self.model_fields_set:
            _dict['PercentOff'] = None

        # set to None if money_amount_off (nullable) is None
        # and model_fields_set contains the field
        if self.money_amount_off is None and "money_amount_off" in self.model_fields_set:
            _dict['MoneyAmountOff'] = None

        # set to None if promotion_code (nullable) is None
        # and model_fields_set contains the field
        if self.promotion_code is None and "promotion_code" in self.model_fields_set:
            _dict['PromotionCode'] = None

        # set to None if orders_over_amount (nullable) is None
        # and model_fields_set contains the field
        if self.orders_over_amount is None and "orders_over_amount" in self.model_fields_set:
            _dict['OrdersOverAmount'] = None

        # set to None if promotion_start_date (nullable) is None
        # and model_fields_set contains the field
        if self.promotion_start_date is None and "promotion_start_date" in self.model_fields_set:
            _dict['PromotionStartDate'] = None

        # set to None if promotion_end_date (nullable) is None
        # and model_fields_set contains the field
        if self.promotion_end_date is None and "promotion_end_date" in self.model_fields_set:
            _dict['PromotionEndDate'] = None

        # set to None if promotion_occasion (nullable) is None
        # and model_fields_set contains the field
        if self.promotion_occasion is None and "promotion_occasion" in self.model_fields_set:
            _dict['PromotionOccasion'] = None

        # set to None if language (nullable) is None
        # and model_fields_set contains the field
        if self.language is None and "language" in self.model_fields_set:
            _dict['Language'] = None

        # set to None if currency_code (nullable) is None
        # and model_fields_set contains the field
        if self.currency_code is None and "currency_code" in self.model_fields_set:
            _dict['CurrencyCode'] = None

        # set to None if final_app_urls (nullable) is None
        # and model_fields_set contains the field
        if self.final_app_urls is None and "final_app_urls" in self.model_fields_set:
            _dict['FinalAppUrls'] = None

        # set to None if final_mobile_urls (nullable) is None
        # and model_fields_set contains the field
        if self.final_mobile_urls is None and "final_mobile_urls" in self.model_fields_set:
            _dict['FinalMobileUrls'] = None

        # set to None if final_urls (nullable) is None
        # and model_fields_set contains the field
        if self.final_urls is None and "final_urls" in self.model_fields_set:
            _dict['FinalUrls'] = None

        # set to None if url_custom_parameters (nullable) is None
        # and model_fields_set contains the field
        if self.url_custom_parameters is None and "url_custom_parameters" in self.model_fields_set:
            _dict['UrlCustomParameters'] = None

        # set to None if tracking_url_template (nullable) is None
        # and model_fields_set contains the field
        if self.tracking_url_template is None and "tracking_url_template" in self.model_fields_set:
            _dict['TrackingUrlTemplate'] = None

        # set to None if final_url_suffix (nullable) is None
        # and model_fields_set contains the field
        if self.final_url_suffix is None and "final_url_suffix" in self.model_fields_set:
            _dict['FinalUrlSuffix'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['Status'] = None

        # set to None if scheduling (nullable) is None
        # and model_fields_set contains the field
        if self.scheduling is None and "scheduling" in self.model_fields_set:
            _dict['Scheduling'] = None

        # set to None if device_preference (nullable) is None
        # and model_fields_set contains the field
        if self.device_preference is None and "device_preference" in self.model_fields_set:
            _dict['DevicePreference'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['Id'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['Type'] = None

        # set to None if version (nullable) is None
        # and model_fields_set contains the field
        if self.version is None and "version" in self.model_fields_set:
            _dict['Version'] = None

        # set to None if forward_compatibility_map (nullable) is None
        # and model_fields_set contains the field
        if self.forward_compatibility_map is None and "forward_compatibility_map" in self.model_fields_set:
            _dict['ForwardCompatibilityMap'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PromotionAdExtension from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "PromotionItem": obj.get("PromotionItem") if obj.get("PromotionItem") is not None else None,
                        "DiscountModifier": obj.get("DiscountModifier") if obj.get("DiscountModifier") is not None else None,
                        "PercentOff": obj.get("PercentOff") if obj.get("PercentOff") is not None else None,
                        "MoneyAmountOff": obj.get("MoneyAmountOff") if obj.get("MoneyAmountOff") is not None else None,
                        "PromotionCode": obj.get("PromotionCode") if obj.get("PromotionCode") is not None else None,
                        "OrdersOverAmount": obj.get("OrdersOverAmount") if obj.get("OrdersOverAmount") is not None else None,
                        "PromotionStartDate": ModelDate.from_dict(obj["PromotionStartDate"]) if obj.get("PromotionStartDate") is not None else None,
                        "PromotionEndDate": ModelDate.from_dict(obj["PromotionEndDate"]) if obj.get("PromotionEndDate") is not None else None,
                        "PromotionOccasion": obj.get("PromotionOccasion") if obj.get("PromotionOccasion") is not None else None,
                        "Language": obj.get("Language") if obj.get("Language") is not None else None,
                        "CurrencyCode": obj.get("CurrencyCode") if obj.get("CurrencyCode") is not None else None,
                        "FinalAppUrls": [AppUrl.from_dict(_item) for _item in obj["FinalAppUrls"]] if obj.get("FinalAppUrls") is not None else None,
                        "FinalMobileUrls": obj.get("FinalMobileUrls"),
                        "FinalUrls": obj.get("FinalUrls"),
                        "UrlCustomParameters": CustomParameters.from_dict(obj["UrlCustomParameters"]) if obj.get("UrlCustomParameters") is not None else None,
                        "TrackingUrlTemplate": obj.get("TrackingUrlTemplate") if obj.get("TrackingUrlTemplate") is not None else None,
                        "FinalUrlSuffix": obj.get("FinalUrlSuffix") if obj.get("FinalUrlSuffix") is not None else None,
                        "Status": obj.get("Status") if obj.get("Status") is not None else None,
                        "Scheduling": Schedule.from_dict(obj["Scheduling"]) if obj.get("Scheduling") is not None else None,
                        "DevicePreference": obj.get("DevicePreference") if obj.get("DevicePreference") is not None else None,
                        "Id": obj.get("Id") if obj.get("Id") is not None else None,
                        "Type": obj.get("Type") if obj.get("Type") is not None else 'PromotionAdExtension',
                        "Version": obj.get("Version") if obj.get("Version") is not None else None,
                        "ForwardCompatibilityMap": [KeyValuePairOfstringAndstring.from_dict(_item) for _item in obj["ForwardCompatibilityMap"]] if obj.get("ForwardCompatibilityMap") is not None else None
        })
        return _obj
