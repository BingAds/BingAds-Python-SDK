# coding: utf-8

"""
    CampaignManagementService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union, Set
from openapi_client.models.campaign.ad_group_criterion_editorial_status import AdGroupCriterionEditorialStatus
from openapi_client.models.campaign.ad_group_criterion_status import AdGroupCriterionStatus
from openapi_client.models.campaign.app_url import AppUrl
from openapi_client.models.campaign.criterion import Criterion
from openapi_client.models.campaign.criterion_bid import CriterionBid
from openapi_client.models.campaign.criterion_cashback import CriterionCashback
from openapi_client.models.campaign.custom_parameters import CustomParameters
from typing_extensions import Self

class BiddableAdGroupCriterion(BaseModel):
    """
    BiddableAdGroupCriterion
    """ # noqa: E501
    criterion_bid: Optional[CriterionBid] = Field(default=None, alias="CriterionBid")
    destination_url: Optional[StrictStr] = Field(default=None, alias="DestinationUrl")
    tracking_url_template: Optional[StrictStr] = Field(default=None, alias="TrackingUrlTemplate")
    final_url_suffix: Optional[StrictStr] = Field(default=None, alias="FinalUrlSuffix")
    url_custom_parameters: Optional[CustomParameters] = Field(default=None, alias="UrlCustomParameters")
    final_urls: Optional[List[StrictStr]] = Field(default=None, alias="FinalUrls")
    final_mobile_urls: Optional[List[StrictStr]] = Field(default=None, alias="FinalMobileUrls")
    final_app_urls: Optional[List[Optional[AppUrl]]] = Field(default=None, alias="FinalAppUrls")
    editorial_status: Optional[AdGroupCriterionEditorialStatus] = Field(default=None, alias="EditorialStatus")
    criterion_cashback: Optional[CriterionCashback] = Field(default=None, alias="CriterionCashback")
    ad_group_id: Optional[StrictStr] = Field(default=None, alias="AdGroupId")
    id: Optional[StrictStr] = Field(default=None, alias="Id")
    status: Optional[AdGroupCriterionStatus] = Field(default=None, alias="Status")
    criterion: Optional[Criterion] = Field(default=None, alias="Criterion")
    type: Optional[StrictStr] = Field(default='BiddableAdGroupCriterion', alias="Type")
    __properties: ClassVar[List[str]] = ["CriterionBid", "DestinationUrl", "TrackingUrlTemplate", "FinalUrlSuffix", "UrlCustomParameters", "FinalUrls", "FinalMobileUrls", "FinalAppUrls", "EditorialStatus", "CriterionCashback", "AdGroupId", "Id", "Status", "Criterion", "Type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )
	
    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())
	
    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BiddableAdGroupCriterion from a JSON string"""
        return cls.from_dict(json.loads(json_str))
	

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of criterion_bid
        if self.criterion_bid:
            _dict['CriterionBid'] = self.criterion_bid.to_dict()
        # override the default output from pydantic by calling `to_dict()` of url_custom_parameters
        if self.url_custom_parameters:
            _dict['UrlCustomParameters'] = self.url_custom_parameters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in final_app_urls (list)
        _items = []
        if self.final_app_urls:
            for _item_final_app_urls in self.final_app_urls:
                if _item_final_app_urls:
                    _items.append(_item_final_app_urls.to_dict())
            _dict['FinalAppUrls'] = _items
        # override the default output from pydantic by calling `to_dict()` of criterion_cashback
        if self.criterion_cashback:
            _dict['CriterionCashback'] = self.criterion_cashback.to_dict()
        # override the default output from pydantic by calling `to_dict()` of criterion
        if self.criterion:
            _dict['Criterion'] = self.criterion.to_dict()
        # set to None if criterion_bid (nullable) is None
        # and model_fields_set contains the field
        if self.criterion_bid is None and "criterion_bid" in self.model_fields_set:
            _dict['CriterionBid'] = None

        # set to None if destination_url (nullable) is None
        # and model_fields_set contains the field
        if self.destination_url is None and "destination_url" in self.model_fields_set:
            _dict['DestinationUrl'] = None

        # set to None if tracking_url_template (nullable) is None
        # and model_fields_set contains the field
        if self.tracking_url_template is None and "tracking_url_template" in self.model_fields_set:
            _dict['TrackingUrlTemplate'] = None

        # set to None if final_url_suffix (nullable) is None
        # and model_fields_set contains the field
        if self.final_url_suffix is None and "final_url_suffix" in self.model_fields_set:
            _dict['FinalUrlSuffix'] = None

        # set to None if url_custom_parameters (nullable) is None
        # and model_fields_set contains the field
        if self.url_custom_parameters is None and "url_custom_parameters" in self.model_fields_set:
            _dict['UrlCustomParameters'] = None

        # set to None if final_urls (nullable) is None
        # and model_fields_set contains the field
        if self.final_urls is None and "final_urls" in self.model_fields_set:
            _dict['FinalUrls'] = None

        # set to None if final_mobile_urls (nullable) is None
        # and model_fields_set contains the field
        if self.final_mobile_urls is None and "final_mobile_urls" in self.model_fields_set:
            _dict['FinalMobileUrls'] = None

        # set to None if final_app_urls (nullable) is None
        # and model_fields_set contains the field
        if self.final_app_urls is None and "final_app_urls" in self.model_fields_set:
            _dict['FinalAppUrls'] = None

        # set to None if editorial_status (nullable) is None
        # and model_fields_set contains the field
        if self.editorial_status is None and "editorial_status" in self.model_fields_set:
            _dict['EditorialStatus'] = None

        # set to None if criterion_cashback (nullable) is None
        # and model_fields_set contains the field
        if self.criterion_cashback is None and "criterion_cashback" in self.model_fields_set:
            _dict['CriterionCashback'] = None

        # set to None if ad_group_id (nullable) is None
        # and model_fields_set contains the field
        if self.ad_group_id is None and "ad_group_id" in self.model_fields_set:
            _dict['AdGroupId'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['Id'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['Status'] = None

        # set to None if criterion (nullable) is None
        # and model_fields_set contains the field
        if self.criterion is None and "criterion" in self.model_fields_set:
            _dict['Criterion'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['Type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BiddableAdGroupCriterion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CriterionBid": CriterionBid.from_dict(obj["CriterionBid"]) if obj.get("CriterionBid") is not None else None,
                        "DestinationUrl": obj.get("DestinationUrl") if obj.get("DestinationUrl") is not None else None,
                        "TrackingUrlTemplate": obj.get("TrackingUrlTemplate") if obj.get("TrackingUrlTemplate") is not None else None,
                        "FinalUrlSuffix": obj.get("FinalUrlSuffix") if obj.get("FinalUrlSuffix") is not None else None,
                        "UrlCustomParameters": CustomParameters.from_dict(obj["UrlCustomParameters"]) if obj.get("UrlCustomParameters") is not None else None,
                        "FinalUrls": obj.get("FinalUrls"),
                        "FinalMobileUrls": obj.get("FinalMobileUrls"),
                        "FinalAppUrls": [AppUrl.from_dict(_item) for _item in obj["FinalAppUrls"]] if obj.get("FinalAppUrls") is not None else None,
                        "EditorialStatus": obj.get("EditorialStatus") if obj.get("EditorialStatus") is not None else None,
                        "CriterionCashback": CriterionCashback.from_dict(obj["CriterionCashback"]) if obj.get("CriterionCashback") is not None else None,
                        "AdGroupId": obj.get("AdGroupId") if obj.get("AdGroupId") is not None else None,
                        "Id": obj.get("Id") if obj.get("Id") is not None else None,
                        "Status": obj.get("Status") if obj.get("Status") is not None else None,
                        "Criterion": Criterion.from_dict(obj["Criterion"]) if obj.get("Criterion") is not None else None,
                        "Type": obj.get("Type") if obj.get("Type") is not None else 'BiddableAdGroupCriterion'
        })
        return _obj
