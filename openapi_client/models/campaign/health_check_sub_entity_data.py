# coding: utf-8

"""
    CampaignManagementService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union, Set
from typing_extensions import Self

class HealthCheckSubEntityData(BaseModel):
    """
    HealthCheckSubEntityData
    """ # noqa: E501
    sub_entity_health_issue_count: Optional[StrictInt] = Field(default=None, alias="SubEntityHealthIssueCount")
    sub_entity_level: Optional[StrictStr] = Field(default=None, alias="SubEntityLevel")
    sub_entity_ids: Optional[List[StrictStr]] = Field(default=None, alias="SubEntityIds")
    __properties: ClassVar[List[str]] = ["SubEntityHealthIssueCount", "SubEntityLevel", "SubEntityIds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )
	

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if sub_entity_health_issue_count (nullable) is None
        # and model_fields_set contains the field
        if self.sub_entity_health_issue_count is None and "sub_entity_health_issue_count" in self.model_fields_set:
            _dict['SubEntityHealthIssueCount'] = None

        # set to None if sub_entity_level (nullable) is None
        # and model_fields_set contains the field
        if self.sub_entity_level is None and "sub_entity_level" in self.model_fields_set:
            _dict['SubEntityLevel'] = None

        # set to None if sub_entity_ids (nullable) is None
        # and model_fields_set contains the field
        if self.sub_entity_ids is None and "sub_entity_ids" in self.model_fields_set:
            _dict['SubEntityIds'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HealthCheckSubEntityData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "SubEntityHealthIssueCount": obj.get("SubEntityHealthIssueCount") if obj.get("SubEntityHealthIssueCount") is not None else None,
                        "SubEntityLevel": obj.get("SubEntityLevel") if obj.get("SubEntityLevel") is not None else None,
                        "SubEntityIds": obj.get("SubEntityIds")
        })
        return _obj
