# coding: utf-8

"""
    CampaignManagementService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union, Set
from openapi_client.models.campaign.ad_extension_additional_field import AdExtensionAdditionalField
from openapi_client.models.campaign.ad_extensions_type_filter import AdExtensionsTypeFilter
from typing_extensions import Self

class GetAdExtensionsByIdsRequest(BaseModel):
    """
    GetAdExtensionsByIdsRequest
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, alias="AccountId")
    ad_extension_ids: Optional[List[StrictStr]] = Field(default=None, alias="AdExtensionIds")
    ad_extension_type: Optional[AdExtensionsTypeFilter] = Field(default=None, alias="AdExtensionType")
    return_additional_fields: Optional[AdExtensionAdditionalField] = Field(default=None, alias="ReturnAdditionalFields")
    __properties: ClassVar[List[str]] = ["AccountId", "AdExtensionIds", "AdExtensionType", "ReturnAdditionalFields"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )
	

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if account_id (nullable) is None
        # and model_fields_set contains the field
        if self.account_id is None and "account_id" in self.model_fields_set:
            _dict['AccountId'] = None

        # set to None if ad_extension_ids (nullable) is None
        # and model_fields_set contains the field
        if self.ad_extension_ids is None and "ad_extension_ids" in self.model_fields_set:
            _dict['AdExtensionIds'] = None

        # set to None if ad_extension_type (nullable) is None
        # and model_fields_set contains the field
        if self.ad_extension_type is None and "ad_extension_type" in self.model_fields_set:
            _dict['AdExtensionType'] = None

        # set to None if return_additional_fields (nullable) is None
        # and model_fields_set contains the field
        if self.return_additional_fields is None and "return_additional_fields" in self.model_fields_set:
            _dict['ReturnAdditionalFields'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetAdExtensionsByIdsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AccountId": obj.get("AccountId") if obj.get("AccountId") is not None else None,
                        "AdExtensionIds": obj.get("AdExtensionIds"),
                        "AdExtensionType": obj.get("AdExtensionType") if obj.get("AdExtensionType") is not None else None,
                        "ReturnAdditionalFields": obj.get("ReturnAdditionalFields") if obj.get("ReturnAdditionalFields") is not None else None
        })
        return _obj
