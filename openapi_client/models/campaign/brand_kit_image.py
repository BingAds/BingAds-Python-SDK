# coding: utf-8

"""
    CampaignManagementService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union, Set
from typing_extensions import Self

class BrandKitImage(BaseModel):
    """
    BrandKitImage
    """ # noqa: E501
    crop_x: Optional[StrictInt] = Field(default=None, alias="CropX")
    crop_y: Optional[StrictInt] = Field(default=None, alias="CropY")
    crop_width: Optional[StrictInt] = Field(default=None, alias="CropWidth")
    crop_height: Optional[StrictInt] = Field(default=None, alias="CropHeight")
    id: Optional[StrictStr] = Field(default=None, alias="Id")
    url: Optional[StrictStr] = Field(default=None, alias="Url")
    thumbnail_url: Optional[StrictStr] = Field(default=None, alias="ThumbnailUrl")
    __properties: ClassVar[List[str]] = ["CropX", "CropY", "CropWidth", "CropHeight", "Id", "Url", "ThumbnailUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )
	

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if crop_x (nullable) is None
        # and model_fields_set contains the field
        if self.crop_x is None and "crop_x" in self.model_fields_set:
            _dict['CropX'] = None

        # set to None if crop_y (nullable) is None
        # and model_fields_set contains the field
        if self.crop_y is None and "crop_y" in self.model_fields_set:
            _dict['CropY'] = None

        # set to None if crop_width (nullable) is None
        # and model_fields_set contains the field
        if self.crop_width is None and "crop_width" in self.model_fields_set:
            _dict['CropWidth'] = None

        # set to None if crop_height (nullable) is None
        # and model_fields_set contains the field
        if self.crop_height is None and "crop_height" in self.model_fields_set:
            _dict['CropHeight'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['Id'] = None

        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['Url'] = None

        # set to None if thumbnail_url (nullable) is None
        # and model_fields_set contains the field
        if self.thumbnail_url is None and "thumbnail_url" in self.model_fields_set:
            _dict['ThumbnailUrl'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BrandKitImage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CropX": obj.get("CropX") if obj.get("CropX") is not None else None,
                        "CropY": obj.get("CropY") if obj.get("CropY") is not None else None,
                        "CropWidth": obj.get("CropWidth") if obj.get("CropWidth") is not None else None,
                        "CropHeight": obj.get("CropHeight") if obj.get("CropHeight") is not None else None,
                        "Id": obj.get("Id") if obj.get("Id") is not None else None,
                        "Url": obj.get("Url") if obj.get("Url") is not None else None,
                        "ThumbnailUrl": obj.get("ThumbnailUrl") if obj.get("ThumbnailUrl") is not None else None
        })
        return _obj
