# coding: utf-8

"""
    CampaignManagementService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union, Set
from openapi_client.models.campaign.health_check_entity import HealthCheckEntity
from openapi_client.models.campaign.health_check_sub_entity_data import HealthCheckSubEntityData
from typing_extensions import Self

class HealthCheckData(BaseModel):
    """
    HealthCheckData
    """ # noqa: E501
    health_check_entity: Optional[HealthCheckEntity] = Field(default=None, alias="HealthCheckEntity")
    health_check_name: Optional[StrictStr] = Field(default=None, alias="HealthCheckName")
    health_check_data_version: Optional[StrictStr] = Field(default=None, alias="HealthCheckDataVersion")
    health_check_json_data: Optional[StrictStr] = Field(default=None, alias="HealthCheckJsonData")
    health_check_sub_entity_results: Optional[HealthCheckSubEntityData] = Field(default=None, alias="HealthCheckSubEntityResults")
    __properties: ClassVar[List[str]] = ["HealthCheckEntity", "HealthCheckName", "HealthCheckDataVersion", "HealthCheckJsonData", "HealthCheckSubEntityResults"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )
	

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of health_check_entity
        if self.health_check_entity:
            _dict['HealthCheckEntity'] = self.health_check_entity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of health_check_sub_entity_results
        if self.health_check_sub_entity_results:
            _dict['HealthCheckSubEntityResults'] = self.health_check_sub_entity_results.to_dict()
        # set to None if health_check_entity (nullable) is None
        # and model_fields_set contains the field
        if self.health_check_entity is None and "health_check_entity" in self.model_fields_set:
            _dict['HealthCheckEntity'] = None

        # set to None if health_check_name (nullable) is None
        # and model_fields_set contains the field
        if self.health_check_name is None and "health_check_name" in self.model_fields_set:
            _dict['HealthCheckName'] = None

        # set to None if health_check_data_version (nullable) is None
        # and model_fields_set contains the field
        if self.health_check_data_version is None and "health_check_data_version" in self.model_fields_set:
            _dict['HealthCheckDataVersion'] = None

        # set to None if health_check_json_data (nullable) is None
        # and model_fields_set contains the field
        if self.health_check_json_data is None and "health_check_json_data" in self.model_fields_set:
            _dict['HealthCheckJsonData'] = None

        # set to None if health_check_sub_entity_results (nullable) is None
        # and model_fields_set contains the field
        if self.health_check_sub_entity_results is None and "health_check_sub_entity_results" in self.model_fields_set:
            _dict['HealthCheckSubEntityResults'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HealthCheckData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "HealthCheckEntity": HealthCheckEntity.from_dict(obj["HealthCheckEntity"]) if obj.get("HealthCheckEntity") is not None else None,
                        "HealthCheckName": obj.get("HealthCheckName") if obj.get("HealthCheckName") is not None else None,
                        "HealthCheckDataVersion": obj.get("HealthCheckDataVersion") if obj.get("HealthCheckDataVersion") is not None else None,
                        "HealthCheckJsonData": obj.get("HealthCheckJsonData") if obj.get("HealthCheckJsonData") is not None else None,
                        "HealthCheckSubEntityResults": HealthCheckSubEntityData.from_dict(obj["HealthCheckSubEntityResults"]) if obj.get("HealthCheckSubEntityResults") is not None else None
        })
        return _obj
