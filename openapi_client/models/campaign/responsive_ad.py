# coding: utf-8

"""
    CampaignManagementService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union, Set
from openapi_client.models.campaign.ad_editorial_status import AdEditorialStatus
from openapi_client.models.campaign.ad_status import AdStatus
from openapi_client.models.campaign.ad_sub_type import AdSubType
from openapi_client.models.campaign.app_url import AppUrl
from openapi_client.models.campaign.asset_link import AssetLink
from openapi_client.models.campaign.call_to_action import CallToAction
from openapi_client.models.campaign.custom_parameters import CustomParameters
from openapi_client.models.campaign.key_value_pair_ofstring_andstring import KeyValuePairOfstringAndstring
from openapi_client.models.campaign.language_name import LanguageName
from openapi_client.models.campaign.verified_tracking_setting import VerifiedTrackingSetting
from typing_extensions import Self

class ResponsiveAd(BaseModel):
    """
    ResponsiveAd
    """ # noqa: E501
    headline: Optional[StrictStr] = Field(default=None, alias="Headline")
    long_headline_string: Optional[StrictStr] = Field(default=None, alias="LongHeadlineString")
    text: Optional[StrictStr] = Field(default=None, alias="Text")
    business_name: Optional[StrictStr] = Field(default=None, alias="BusinessName")
    call_to_action: Optional[CallToAction] = Field(default=None, alias="CallToAction")
    call_to_action_language: Optional[LanguageName] = Field(default=None, alias="CallToActionLanguage")
    images: Optional[List[Optional[AssetLink]]] = Field(default=None, alias="Images")
    videos: Optional[List[Optional[AssetLink]]] = Field(default=None, alias="Videos")
    headlines: Optional[List[Optional[AssetLink]]] = Field(default=None, alias="Headlines")
    long_headline: Optional[AssetLink] = Field(default=None, alias="LongHeadline")
    long_headlines: Optional[List[Optional[AssetLink]]] = Field(default=None, alias="LongHeadlines")
    descriptions: Optional[List[Optional[AssetLink]]] = Field(default=None, alias="Descriptions")
    impression_tracking_urls: Optional[List[StrictStr]] = Field(default=None, alias="ImpressionTrackingUrls")
    verified_tracking_settings: Optional[VerifiedTrackingSetting] = Field(default=None, alias="VerifiedTrackingSettings")
    ad_sub_type: Optional[AdSubType] = Field(default=None, alias="AdSubType")
    id: Optional[StrictStr] = Field(default=None, alias="Id")
    type: Optional[StrictStr] = Field(default='ResponsiveAd', alias="Type")
    status: Optional[AdStatus] = Field(default=None, alias="Status")
    editorial_status: Optional[AdEditorialStatus] = Field(default=None, alias="EditorialStatus")
    device_preference: Optional[StrictStr] = Field(default=None, alias="DevicePreference")
    ad_format_preference: Optional[StrictStr] = Field(default=None, alias="AdFormatPreference")
    tracking_url_template: Optional[StrictStr] = Field(default=None, alias="TrackingUrlTemplate")
    final_url_suffix: Optional[StrictStr] = Field(default=None, alias="FinalUrlSuffix")
    url_custom_parameters: Optional[CustomParameters] = Field(default=None, alias="UrlCustomParameters")
    final_urls: Optional[List[StrictStr]] = Field(default=None, alias="FinalUrls")
    final_mobile_urls: Optional[List[StrictStr]] = Field(default=None, alias="FinalMobileUrls")
    final_app_urls: Optional[List[Optional[AppUrl]]] = Field(default=None, alias="FinalAppUrls")
    forward_compatibility_map: Optional[List[Optional[KeyValuePairOfstringAndstring]]] = Field(default=None, alias="ForwardCompatibilityMap")
    __properties: ClassVar[List[str]] = ["Headline", "LongHeadlineString", "Text", "BusinessName", "CallToAction", "CallToActionLanguage", "Images", "Videos", "Headlines", "LongHeadline", "LongHeadlines", "Descriptions", "ImpressionTrackingUrls", "VerifiedTrackingSettings", "AdSubType", "Id", "Type", "Status", "EditorialStatus", "DevicePreference", "AdFormatPreference", "TrackingUrlTemplate", "FinalUrlSuffix", "UrlCustomParameters", "FinalUrls", "FinalMobileUrls", "FinalAppUrls", "ForwardCompatibilityMap"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )
	
    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())
	
    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResponsiveAd from a JSON string"""
        return cls.from_dict(json.loads(json_str))
	

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in images (list)
        _items = []
        if self.images:
            for _item_images in self.images:
                if _item_images:
                    _items.append(_item_images.to_dict())
            _dict['Images'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in videos (list)
        _items = []
        if self.videos:
            for _item_videos in self.videos:
                if _item_videos:
                    _items.append(_item_videos.to_dict())
            _dict['Videos'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in headlines (list)
        _items = []
        if self.headlines:
            for _item_headlines in self.headlines:
                if _item_headlines:
                    _items.append(_item_headlines.to_dict())
            _dict['Headlines'] = _items
        # override the default output from pydantic by calling `to_dict()` of long_headline
        if self.long_headline:
            _dict['LongHeadline'] = self.long_headline.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in long_headlines (list)
        _items = []
        if self.long_headlines:
            for _item_long_headlines in self.long_headlines:
                if _item_long_headlines:
                    _items.append(_item_long_headlines.to_dict())
            _dict['LongHeadlines'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in descriptions (list)
        _items = []
        if self.descriptions:
            for _item_descriptions in self.descriptions:
                if _item_descriptions:
                    _items.append(_item_descriptions.to_dict())
            _dict['Descriptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of verified_tracking_settings
        if self.verified_tracking_settings:
            _dict['VerifiedTrackingSettings'] = self.verified_tracking_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of url_custom_parameters
        if self.url_custom_parameters:
            _dict['UrlCustomParameters'] = self.url_custom_parameters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in final_app_urls (list)
        _items = []
        if self.final_app_urls:
            for _item_final_app_urls in self.final_app_urls:
                if _item_final_app_urls:
                    _items.append(_item_final_app_urls.to_dict())
            _dict['FinalAppUrls'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in forward_compatibility_map (list)
        _items = []
        if self.forward_compatibility_map:
            for _item_forward_compatibility_map in self.forward_compatibility_map:
                if _item_forward_compatibility_map:
                    _items.append(_item_forward_compatibility_map.to_dict())
            _dict['ForwardCompatibilityMap'] = _items
        # set to None if headline (nullable) is None
        # and model_fields_set contains the field
        if self.headline is None and "headline" in self.model_fields_set:
            _dict['Headline'] = None

        # set to None if long_headline_string (nullable) is None
        # and model_fields_set contains the field
        if self.long_headline_string is None and "long_headline_string" in self.model_fields_set:
            _dict['LongHeadlineString'] = None

        # set to None if text (nullable) is None
        # and model_fields_set contains the field
        if self.text is None and "text" in self.model_fields_set:
            _dict['Text'] = None

        # set to None if business_name (nullable) is None
        # and model_fields_set contains the field
        if self.business_name is None and "business_name" in self.model_fields_set:
            _dict['BusinessName'] = None

        # set to None if call_to_action (nullable) is None
        # and model_fields_set contains the field
        if self.call_to_action is None and "call_to_action" in self.model_fields_set:
            _dict['CallToAction'] = None

        # set to None if call_to_action_language (nullable) is None
        # and model_fields_set contains the field
        if self.call_to_action_language is None and "call_to_action_language" in self.model_fields_set:
            _dict['CallToActionLanguage'] = None

        # set to None if images (nullable) is None
        # and model_fields_set contains the field
        if self.images is None and "images" in self.model_fields_set:
            _dict['Images'] = None

        # set to None if videos (nullable) is None
        # and model_fields_set contains the field
        if self.videos is None and "videos" in self.model_fields_set:
            _dict['Videos'] = None

        # set to None if headlines (nullable) is None
        # and model_fields_set contains the field
        if self.headlines is None and "headlines" in self.model_fields_set:
            _dict['Headlines'] = None

        # set to None if long_headline (nullable) is None
        # and model_fields_set contains the field
        if self.long_headline is None and "long_headline" in self.model_fields_set:
            _dict['LongHeadline'] = None

        # set to None if long_headlines (nullable) is None
        # and model_fields_set contains the field
        if self.long_headlines is None and "long_headlines" in self.model_fields_set:
            _dict['LongHeadlines'] = None

        # set to None if descriptions (nullable) is None
        # and model_fields_set contains the field
        if self.descriptions is None and "descriptions" in self.model_fields_set:
            _dict['Descriptions'] = None

        # set to None if impression_tracking_urls (nullable) is None
        # and model_fields_set contains the field
        if self.impression_tracking_urls is None and "impression_tracking_urls" in self.model_fields_set:
            _dict['ImpressionTrackingUrls'] = None

        # set to None if verified_tracking_settings (nullable) is None
        # and model_fields_set contains the field
        if self.verified_tracking_settings is None and "verified_tracking_settings" in self.model_fields_set:
            _dict['VerifiedTrackingSettings'] = None

        # set to None if ad_sub_type (nullable) is None
        # and model_fields_set contains the field
        if self.ad_sub_type is None and "ad_sub_type" in self.model_fields_set:
            _dict['AdSubType'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['Id'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['Type'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['Status'] = None

        # set to None if editorial_status (nullable) is None
        # and model_fields_set contains the field
        if self.editorial_status is None and "editorial_status" in self.model_fields_set:
            _dict['EditorialStatus'] = None

        # set to None if device_preference (nullable) is None
        # and model_fields_set contains the field
        if self.device_preference is None and "device_preference" in self.model_fields_set:
            _dict['DevicePreference'] = None

        # set to None if ad_format_preference (nullable) is None
        # and model_fields_set contains the field
        if self.ad_format_preference is None and "ad_format_preference" in self.model_fields_set:
            _dict['AdFormatPreference'] = None

        # set to None if tracking_url_template (nullable) is None
        # and model_fields_set contains the field
        if self.tracking_url_template is None and "tracking_url_template" in self.model_fields_set:
            _dict['TrackingUrlTemplate'] = None

        # set to None if final_url_suffix (nullable) is None
        # and model_fields_set contains the field
        if self.final_url_suffix is None and "final_url_suffix" in self.model_fields_set:
            _dict['FinalUrlSuffix'] = None

        # set to None if url_custom_parameters (nullable) is None
        # and model_fields_set contains the field
        if self.url_custom_parameters is None and "url_custom_parameters" in self.model_fields_set:
            _dict['UrlCustomParameters'] = None

        # set to None if final_urls (nullable) is None
        # and model_fields_set contains the field
        if self.final_urls is None and "final_urls" in self.model_fields_set:
            _dict['FinalUrls'] = None

        # set to None if final_mobile_urls (nullable) is None
        # and model_fields_set contains the field
        if self.final_mobile_urls is None and "final_mobile_urls" in self.model_fields_set:
            _dict['FinalMobileUrls'] = None

        # set to None if final_app_urls (nullable) is None
        # and model_fields_set contains the field
        if self.final_app_urls is None and "final_app_urls" in self.model_fields_set:
            _dict['FinalAppUrls'] = None

        # set to None if forward_compatibility_map (nullable) is None
        # and model_fields_set contains the field
        if self.forward_compatibility_map is None and "forward_compatibility_map" in self.model_fields_set:
            _dict['ForwardCompatibilityMap'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResponsiveAd from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Headline": obj.get("Headline") if obj.get("Headline") is not None else None,
                        "LongHeadlineString": obj.get("LongHeadlineString") if obj.get("LongHeadlineString") is not None else None,
                        "Text": obj.get("Text") if obj.get("Text") is not None else None,
                        "BusinessName": obj.get("BusinessName") if obj.get("BusinessName") is not None else None,
                        "CallToAction": obj.get("CallToAction") if obj.get("CallToAction") is not None else None,
                        "CallToActionLanguage": obj.get("CallToActionLanguage") if obj.get("CallToActionLanguage") is not None else None,
                        "Images": [AssetLink.from_dict(_item) for _item in obj["Images"]] if obj.get("Images") is not None else None,
                        "Videos": [AssetLink.from_dict(_item) for _item in obj["Videos"]] if obj.get("Videos") is not None else None,
                        "Headlines": [AssetLink.from_dict(_item) for _item in obj["Headlines"]] if obj.get("Headlines") is not None else None,
                        "LongHeadline": AssetLink.from_dict(obj["LongHeadline"]) if obj.get("LongHeadline") is not None else None,
                        "LongHeadlines": [AssetLink.from_dict(_item) for _item in obj["LongHeadlines"]] if obj.get("LongHeadlines") is not None else None,
                        "Descriptions": [AssetLink.from_dict(_item) for _item in obj["Descriptions"]] if obj.get("Descriptions") is not None else None,
                        "ImpressionTrackingUrls": obj.get("ImpressionTrackingUrls"),
                        "VerifiedTrackingSettings": VerifiedTrackingSetting.from_dict(obj["VerifiedTrackingSettings"]) if obj.get("VerifiedTrackingSettings") is not None else None,
                        "AdSubType": obj.get("AdSubType") if obj.get("AdSubType") is not None else None,
                        "Id": obj.get("Id") if obj.get("Id") is not None else None,
                        "Type": obj.get("Type") if obj.get("Type") is not None else 'ResponsiveAd',
                        "Status": obj.get("Status") if obj.get("Status") is not None else None,
                        "EditorialStatus": obj.get("EditorialStatus") if obj.get("EditorialStatus") is not None else None,
                        "DevicePreference": obj.get("DevicePreference") if obj.get("DevicePreference") is not None else None,
                        "AdFormatPreference": obj.get("AdFormatPreference") if obj.get("AdFormatPreference") is not None else None,
                        "TrackingUrlTemplate": obj.get("TrackingUrlTemplate") if obj.get("TrackingUrlTemplate") is not None else None,
                        "FinalUrlSuffix": obj.get("FinalUrlSuffix") if obj.get("FinalUrlSuffix") is not None else None,
                        "UrlCustomParameters": CustomParameters.from_dict(obj["UrlCustomParameters"]) if obj.get("UrlCustomParameters") is not None else None,
                        "FinalUrls": obj.get("FinalUrls"),
                        "FinalMobileUrls": obj.get("FinalMobileUrls"),
                        "FinalAppUrls": [AppUrl.from_dict(_item) for _item in obj["FinalAppUrls"]] if obj.get("FinalAppUrls") is not None else None,
                        "ForwardCompatibilityMap": [KeyValuePairOfstringAndstring.from_dict(_item) for _item in obj["ForwardCompatibilityMap"]] if obj.get("ForwardCompatibilityMap") is not None else None
        })
        return _obj
