# coding: utf-8

"""
    CampaignManagementService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union, Set
from typing_extensions import Self

class SharedEntityAssociation(BaseModel):
    """
    SharedEntityAssociation
    """ # noqa: E501
    shared_entity_id: Optional[StrictStr] = Field(default=None, alias="SharedEntityId")
    shared_entity_type: Optional[StrictStr] = Field(default=None, alias="SharedEntityType")
    entity_id: Optional[StrictStr] = Field(default=None, alias="EntityId")
    entity_type: Optional[StrictStr] = Field(default=None, alias="EntityType")
    shared_entity_customer_id: Optional[StrictStr] = Field(default=None, alias="SharedEntityCustomerId")
    __properties: ClassVar[List[str]] = ["SharedEntityId", "SharedEntityType", "EntityId", "EntityType", "SharedEntityCustomerId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )
	

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if shared_entity_id (nullable) is None
        # and model_fields_set contains the field
        if self.shared_entity_id is None and "shared_entity_id" in self.model_fields_set:
            _dict['SharedEntityId'] = None

        # set to None if shared_entity_type (nullable) is None
        # and model_fields_set contains the field
        if self.shared_entity_type is None and "shared_entity_type" in self.model_fields_set:
            _dict['SharedEntityType'] = None

        # set to None if entity_id (nullable) is None
        # and model_fields_set contains the field
        if self.entity_id is None and "entity_id" in self.model_fields_set:
            _dict['EntityId'] = None

        # set to None if entity_type (nullable) is None
        # and model_fields_set contains the field
        if self.entity_type is None and "entity_type" in self.model_fields_set:
            _dict['EntityType'] = None

        # set to None if shared_entity_customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.shared_entity_customer_id is None and "shared_entity_customer_id" in self.model_fields_set:
            _dict['SharedEntityCustomerId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SharedEntityAssociation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "SharedEntityId": obj.get("SharedEntityId") if obj.get("SharedEntityId") is not None else None,
                        "SharedEntityType": obj.get("SharedEntityType") if obj.get("SharedEntityType") is not None else None,
                        "EntityId": obj.get("EntityId") if obj.get("EntityId") is not None else None,
                        "EntityType": obj.get("EntityType") if obj.get("EntityType") is not None else None,
                        "SharedEntityCustomerId": obj.get("SharedEntityCustomerId") if obj.get("SharedEntityCustomerId") is not None else None
        })
        return _obj
