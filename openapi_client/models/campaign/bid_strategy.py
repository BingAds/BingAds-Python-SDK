# coding: utf-8

"""
    CampaignManagementService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union, Set
from openapi_client.models.campaign.bidding_scheme import BiddingScheme
from openapi_client.models.campaign.campaign_type import CampaignType
from typing_extensions import Self

class BidStrategy(BaseModel):
    """
    BidStrategy
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, alias="Id")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    associated_campaign_type: Optional[CampaignType] = Field(default=None, alias="AssociatedCampaignType")
    bidding_scheme: Optional[BiddingScheme] = Field(default=None, alias="BiddingScheme")
    association_count: Optional[StrictInt] = Field(default=None, alias="AssociationCount")
    __properties: ClassVar[List[str]] = ["Id", "Name", "AssociatedCampaignType", "BiddingScheme", "AssociationCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )
	

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bidding_scheme
        if self.bidding_scheme:
            _dict['BiddingScheme'] = self.bidding_scheme.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['Id'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['Name'] = None

        # set to None if associated_campaign_type (nullable) is None
        # and model_fields_set contains the field
        if self.associated_campaign_type is None and "associated_campaign_type" in self.model_fields_set:
            _dict['AssociatedCampaignType'] = None

        # set to None if bidding_scheme (nullable) is None
        # and model_fields_set contains the field
        if self.bidding_scheme is None and "bidding_scheme" in self.model_fields_set:
            _dict['BiddingScheme'] = None

        # set to None if association_count (nullable) is None
        # and model_fields_set contains the field
        if self.association_count is None and "association_count" in self.model_fields_set:
            _dict['AssociationCount'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BidStrategy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Id": obj.get("Id") if obj.get("Id") is not None else None,
                        "Name": obj.get("Name") if obj.get("Name") is not None else None,
                        "AssociatedCampaignType": obj.get("AssociatedCampaignType") if obj.get("AssociatedCampaignType") is not None else None,
                        "BiddingScheme": BiddingScheme.from_dict(obj["BiddingScheme"]) if obj.get("BiddingScheme") is not None else None,
                        "AssociationCount": obj.get("AssociationCount") if obj.get("AssociationCount") is not None else None
        })
        return _obj
