# coding: utf-8

"""
    CampaignManagementService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union, Set
from typing_extensions import Self

class ImportEntityStatistics(BaseModel):
    """
    ImportEntityStatistics
    """ # noqa: E501
    entity_type: Optional[StrictStr] = Field(default=None, alias="EntityType")
    additions: Optional[StrictInt] = Field(default=None, alias="Additions")
    changes: Optional[StrictInt] = Field(default=None, alias="Changes")
    errors: Optional[StrictInt] = Field(default=None, alias="Errors")
    deletions: Optional[StrictInt] = Field(default=None, alias="Deletions")
    total: Optional[StrictInt] = Field(default=None, alias="Total")
    __properties: ClassVar[List[str]] = ["EntityType", "Additions", "Changes", "Errors", "Deletions", "Total"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )
	

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if entity_type (nullable) is None
        # and model_fields_set contains the field
        if self.entity_type is None and "entity_type" in self.model_fields_set:
            _dict['EntityType'] = None

        # set to None if additions (nullable) is None
        # and model_fields_set contains the field
        if self.additions is None and "additions" in self.model_fields_set:
            _dict['Additions'] = None

        # set to None if changes (nullable) is None
        # and model_fields_set contains the field
        if self.changes is None and "changes" in self.model_fields_set:
            _dict['Changes'] = None

        # set to None if errors (nullable) is None
        # and model_fields_set contains the field
        if self.errors is None and "errors" in self.model_fields_set:
            _dict['Errors'] = None

        # set to None if deletions (nullable) is None
        # and model_fields_set contains the field
        if self.deletions is None and "deletions" in self.model_fields_set:
            _dict['Deletions'] = None

        # set to None if total (nullable) is None
        # and model_fields_set contains the field
        if self.total is None and "total" in self.model_fields_set:
            _dict['Total'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImportEntityStatistics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "EntityType": obj.get("EntityType") if obj.get("EntityType") is not None else None,
                        "Additions": obj.get("Additions") if obj.get("Additions") is not None else None,
                        "Changes": obj.get("Changes") if obj.get("Changes") is not None else None,
                        "Errors": obj.get("Errors") if obj.get("Errors") is not None else None,
                        "Deletions": obj.get("Deletions") if obj.get("Deletions") is not None else None,
                        "Total": obj.get("Total") if obj.get("Total") is not None else None
        })
        return _obj
