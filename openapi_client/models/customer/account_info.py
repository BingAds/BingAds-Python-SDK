# coding: utf-8

"""
    CustomerManagementService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union, Set
from openapi_client.models.customer.account_life_cycle_status import AccountLifeCycleStatus
from typing_extensions import Self

class AccountInfo(BaseModel):
    """
    AccountInfo
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, alias="Id")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    number: Optional[StrictStr] = Field(default=None, alias="Number")
    account_life_cycle_status: Optional[AccountLifeCycleStatus] = Field(default=None, alias="AccountLifeCycleStatus")
    pause_reason: Optional[StrictInt] = Field(default=None, alias="PauseReason")
    __properties: ClassVar[List[str]] = ["Id", "Name", "Number", "AccountLifeCycleStatus", "PauseReason"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )
	

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['Id'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['Name'] = None

        # set to None if number (nullable) is None
        # and model_fields_set contains the field
        if self.number is None and "number" in self.model_fields_set:
            _dict['Number'] = None

        # set to None if account_life_cycle_status (nullable) is None
        # and model_fields_set contains the field
        if self.account_life_cycle_status is None and "account_life_cycle_status" in self.model_fields_set:
            _dict['AccountLifeCycleStatus'] = None

        # set to None if pause_reason (nullable) is None
        # and model_fields_set contains the field
        if self.pause_reason is None and "pause_reason" in self.model_fields_set:
            _dict['PauseReason'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Id": obj.get("Id") if obj.get("Id") is not None else None,
                        "Name": obj.get("Name") if obj.get("Name") is not None else None,
                        "Number": obj.get("Number") if obj.get("Number") is not None else None,
                        "AccountLifeCycleStatus": obj.get("AccountLifeCycleStatus") if obj.get("AccountLifeCycleStatus") is not None else None,
                        "PauseReason": obj.get("PauseReason") if obj.get("PauseReason") is not None else None
        })
        return _obj
