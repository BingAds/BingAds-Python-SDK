# coding: utf-8

"""
    CustomerManagementService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union, Set
from openapi_client.models.customer.address import Address
from typing_extensions import Self

class ValidateAddressResponse(BaseModel):
    """
    ValidateAddressResponse
    """ # noqa: E501
    original_address: Optional[Address] = Field(default=None, alias="OriginalAddress")
    status: Optional[StrictStr] = Field(default=None, alias="Status")
    suggested_addresses: Optional[List[Optional[Address]]] = Field(default=None, alias="SuggestedAddresses")
    __properties: ClassVar[List[str]] = ["OriginalAddress", "Status", "SuggestedAddresses"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )
	

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of original_address
        if self.original_address:
            _dict['OriginalAddress'] = self.original_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in suggested_addresses (list)
        _items = []
        if self.suggested_addresses:
            for _item_suggested_addresses in self.suggested_addresses:
                if _item_suggested_addresses:
                    _items.append(_item_suggested_addresses.to_dict())
            _dict['SuggestedAddresses'] = _items
        # set to None if original_address (nullable) is None
        # and model_fields_set contains the field
        if self.original_address is None and "original_address" in self.model_fields_set:
            _dict['OriginalAddress'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['Status'] = None

        # set to None if suggested_addresses (nullable) is None
        # and model_fields_set contains the field
        if self.suggested_addresses is None and "suggested_addresses" in self.model_fields_set:
            _dict['SuggestedAddresses'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ValidateAddressResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "OriginalAddress": Address.from_dict(obj["OriginalAddress"]) if obj.get("OriginalAddress") is not None else None,
                        "Status": obj.get("Status") if obj.get("Status") is not None else None,
                        "SuggestedAddresses": [Address.from_dict(_item) for _item in obj["SuggestedAddresses"]] if obj.get("SuggestedAddresses") is not None else None
        })
        return _obj
