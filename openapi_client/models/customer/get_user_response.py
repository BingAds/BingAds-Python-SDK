# coding: utf-8

"""
    CustomerManagementService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union, Set
from openapi_client.models.customer.customer_role import CustomerRole
from openapi_client.models.customer.user import User
from typing_extensions import Self

class GetUserResponse(BaseModel):
    """
    GetUserResponse
    """ # noqa: E501
    user: Optional[User] = Field(default=None, alias="User")
    customer_roles: Optional[List[Optional[CustomerRole]]] = Field(default=None, alias="CustomerRoles")
    __properties: ClassVar[List[str]] = ["User", "CustomerRoles"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )
	

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['User'] = self.user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in customer_roles (list)
        _items = []
        if self.customer_roles:
            for _item_customer_roles in self.customer_roles:
                if _item_customer_roles:
                    _items.append(_item_customer_roles.to_dict())
            _dict['CustomerRoles'] = _items
        # set to None if user (nullable) is None
        # and model_fields_set contains the field
        if self.user is None and "user" in self.model_fields_set:
            _dict['User'] = None

        # set to None if customer_roles (nullable) is None
        # and model_fields_set contains the field
        if self.customer_roles is None and "customer_roles" in self.model_fields_set:
            _dict['CustomerRoles'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetUserResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "User": User.from_dict(obj["User"]) if obj.get("User") is not None else None,
                        "CustomerRoles": [CustomerRole.from_dict(_item) for _item in obj["CustomerRoles"]] if obj.get("CustomerRoles") is not None else None
        })
        return _obj
