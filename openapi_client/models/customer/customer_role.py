# coding: utf-8

"""
    CustomerManagementService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union, Set
from typing_extensions import Self

class CustomerRole(BaseModel):
    """
    CustomerRole
    """ # noqa: E501
    role_id: Optional[StrictInt] = Field(default=None, alias="RoleId")
    customer_id: Optional[StrictStr] = Field(default=None, alias="CustomerId")
    account_ids: Optional[List[StrictStr]] = Field(default=None, alias="AccountIds")
    linked_account_ids: Optional[List[StrictStr]] = Field(default=None, alias="LinkedAccountIds")
    customer_link_permission: Optional[StrictStr] = Field(default=None, alias="CustomerLinkPermission")
    __properties: ClassVar[List[str]] = ["RoleId", "CustomerId", "AccountIds", "LinkedAccountIds", "CustomerLinkPermission"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )
	

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if role_id (nullable) is None
        # and model_fields_set contains the field
        if self.role_id is None and "role_id" in self.model_fields_set:
            _dict['RoleId'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['CustomerId'] = None

        # set to None if account_ids (nullable) is None
        # and model_fields_set contains the field
        if self.account_ids is None and "account_ids" in self.model_fields_set:
            _dict['AccountIds'] = None

        # set to None if linked_account_ids (nullable) is None
        # and model_fields_set contains the field
        if self.linked_account_ids is None and "linked_account_ids" in self.model_fields_set:
            _dict['LinkedAccountIds'] = None

        # set to None if customer_link_permission (nullable) is None
        # and model_fields_set contains the field
        if self.customer_link_permission is None and "customer_link_permission" in self.model_fields_set:
            _dict['CustomerLinkPermission'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomerRole from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "RoleId": obj.get("RoleId") if obj.get("RoleId") is not None else None,
                        "CustomerId": obj.get("CustomerId") if obj.get("CustomerId") is not None else None,
                        "AccountIds": obj.get("AccountIds"),
                        "LinkedAccountIds": obj.get("LinkedAccountIds"),
                        "CustomerLinkPermission": obj.get("CustomerLinkPermission") if obj.get("CustomerLinkPermission") is not None else None
        })
        return _obj
